# Etherscan API Server Configuration
# Production server with SSL termination and security features

# Upstream definition
upstream etherscan_backend {
    server etherscan-api:8080;
    keepalive 32;
}

# Rate limiting maps
map $request_uri $limit_key {
    ~*/api/v1/balance/     $binary_remote_addr;
    ~*/api/v1/transactions/ $binary_remote_addr;
    ~*/api/v1/contract/    $binary_remote_addr;
    default               "";
}

# HTTP server (redirect to HTTPS)
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }

    # Health check endpoint (allow HTTP for load balancers)
    location /health {
        limit_req zone=health_limit burst=5 nodelay;

        proxy_pass http://etherscan_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Health check specific settings
        proxy_connect_timeout 1s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;

        # Disable access logging for health checks
        access_log off;
    }
}

# HTTPS server
server {
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;
    server_name etherscan-api.local api.etherscan.local;

    # SSL configuration
    ssl_certificate /etc/nginx/ssl/etherscan-api.crt;
    ssl_certificate_key /etc/nginx/ssl/etherscan-api.key;

    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Rate limiting and connection limits
    limit_req zone=api_limit burst=20 nodelay;
    limit_conn conn_limit 10;

    # Root and index
    root /var/www/html;
    index index.html;

    # Main API proxy
    location / {
        # Rate limiting for API endpoints
        if ($limit_key != "") {
            limit_req zone=api_limit burst=10 nodelay;
        }

        # Proxy to backend
        proxy_pass http://etherscan_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # Enable response caching for GET requests
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 1m;
        proxy_cache_valid 404 1m;
        proxy_cache_valid any 5s;
    }

    # Health check endpoint
    location /health {
        limit_req zone=health_limit burst=5 nodelay;

        proxy_pass http://etherscan_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Health check specific settings
        proxy_connect_timeout 1s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;

        # Add health-specific headers
        add_header X-Health-Check "nginx-proxy" always;
    }

    # Metrics endpoint (restrict access)
    location /metrics {
        # Restrict to monitoring networks
        allow 172.21.0.0/16;  # monitoring network
        allow 127.0.0.1;      # localhost
        deny all;

        proxy_pass http://etherscan_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static assets (if any)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        access_log off;
    }

    # Security - block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(sql|conf|log|bak)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /404.html {
        root /var/www/html;
        internal;
    }

    location = /50x.html {
        root /var/www/html;
        internal;
    }
}

# Separate server for Prometheus metrics (internal only)
server {
    listen 8081;
    server_name metrics.etherscan.local;

    # Restrict access to monitoring network only
    allow 172.21.0.0/16;
    allow 127.0.0.1;
    deny all;

    location /metrics {
        proxy_pass http://etherscan_backend:9090;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Nginx metrics
    location /nginx-metrics {
        stub_status on;
        access_log off;
    }
}