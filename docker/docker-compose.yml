services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: artifactor_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-artifactor_v3}
      POSTGRES_USER: ${POSTGRES_USER:-artifactor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-artifactor}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/postgres:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - artifactor_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U artifactor -d artifactor_v3"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: artifactor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - artifactor_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: artifactor_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-artifactor}:${POSTGRES_PASSWORD:-artifactor}@postgres:5432/${POSTGRES_DB:-artifactor_v3}
      - REDIS_URL=redis://redis:6379
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ../backend/src:/app/src:ro
      - ../backend/requirements.txt:/app/requirements.txt:ro
      - upload_data:/app/uploads
    ports:
      - "8000:8000"
    networks:
      - artifactor_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: artifactor_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - NODE_ENV=production
    volumes:
      - ../frontend/src:/app/src:ro
      - ../frontend/public:/app/public:ro
      - ../frontend/package.json:/app/package.json:ro
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - artifactor_network
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    command: npm start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: artifactor_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - upload_data:/var/www/uploads
    ports:
      - "80:80"
      - "443:443"
    networks:
      - artifactor_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - production

  # Agent Bridge Service (v2.0 compatibility)
  agent_bridge:
    build:
      context: ../backend
      dockerfile: Dockerfile.agent_bridge
    container_name: artifactor_agent_bridge
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-artifactor}:${POSTGRES_PASSWORD:-artifactor}@postgres:5432/${POSTGRES_DB:-artifactor_v3}
      - V2_COMPATIBILITY=${V2_COMPATIBILITY:-true}
      - AGENT_COORDINATION_ENABLED=${AGENT_COORDINATION_ENABLED:-true}
    volumes:
      - ../backend/agent_bridge:/app/agent_bridge:ro
      - ../backend/requirements.txt:/app/requirements.txt:ro
      - agent_bridge_data:/app/agent_data
      - ../claude-artifact-coordinator.py:/app/v2_compat/coordinator.py:ro
      - ../claude-artifact-downloader.py:/app/v2_compat/downloader.py:ro
    networks:
      - artifactor_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - full

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  upload_data:
    driver: local
  agent_bridge_data:
    driver: local

networks:
  artifactor_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: artifactor0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
    internal: false
    attachable: false