#!/bin/bash
# ARTIFACTOR - Claude.ai Artifact Downloader
# Universal launcher with automatic environment setup
# Repository: https://github.com/SWORDIntel/ARTIFACTOR

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_NAME="ARTIFACTOR"

# Banner
show_banner() {
    echo -e "${CYAN}"
    echo "  █████╗ ██████╗ ████████╗██╗███████╗ █████╗  ██████╗████████╗ ██████╗ ██████╗ "
    echo " ██╔══██╗██╔══██╗╚══██╔══╝██║██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔═══██╗██╔══██╗"
    echo " ███████║██████╔╝   ██║   ██║█████╗  ███████║██║        ██║   ██║   ██║██████╔╝"
    echo " ██╔══██║██╔══██╗   ██║   ██║██╔══╝  ██╔══██║██║        ██║   ██║   ██║██╔══██╗"
    echo " ██║  ██║██║  ██║   ██║   ██║██║     ██║  ██║╚██████╗   ██║   ╚██████╔╝██║  ██║"
    echo " ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝╚═╝     ╚═╝  ╚═╝ ╚═════╝   ╚═╝    ╚═════╝ ╚═╝  ╚═╝"
    echo -e "${WHITE}                     Claude.ai Artifact Downloader v3.0${NC}"
    echo -e "${PURPLE}                 PyGUI + PYTHON-INTERNAL + DEBUGGER Coordination${NC}"
    echo ""
}

# Help function
show_help() {
    show_banner
    echo -e "${WHITE}Usage:${NC}"
    echo "  ./artifactor [COMMAND] [OPTIONS]"
    echo ""
    echo -e "${WHITE}Commands:${NC}"
    echo -e "  ${GREEN}gui${NC}         Launch GUI interface"
    echo -e "  ${GREEN}cli${NC}         Launch command-line interface"
    echo -e "  ${GREEN}setup${NC}       Setup virtual environment"
    echo -e "  ${GREEN}status${NC}      Show system status"
    echo -e "  ${GREEN}test${NC}        Run system tests"
    echo -e "  ${GREEN}agent${NC}       Test agent coordination"
    echo -e "  ${GREEN}update${NC}      Update dependencies"
    echo -e "  ${GREEN}clean${NC}       Clean virtual environment"
    echo -e "  ${GREEN}backend${NC}     Manage backend services (start/stop/status/logs)"
    echo ""
    echo -e "${WHITE}Options:${NC}"
    echo -e "  ${YELLOW}--force${NC}     Force recreation of environment"
    echo -e "  ${YELLOW}--verbose${NC}   Verbose output"
    echo -e "  ${YELLOW}--no-gui${NC}    Skip GUI dependencies"
    echo -e "  ${YELLOW}--help${NC}      Show this help"
    echo ""
    echo -e "${WHITE}Examples:${NC}"
    echo "  ./artifactor --help             # Show this help"
    echo "  ./artifactor gui                # Launch GUI"
    echo "  ./artifactor cli                # Launch CLI"
    echo "  ./artifactor setup --force      # Rebuild environment"
    echo "  ./artifactor test --verbose     # Run verbose tests"
    echo "  ./artifactor backend start      # Start backend services"
    echo "  ./artifactor backend status     # Check backend health"
    echo ""
    echo -e "${WHITE}Backend Commands:${NC}"
    echo "  ./artifactor backend start      # Start PostgreSQL, Redis, FastAPI"
    echo "  ./artifactor backend stop       # Stop all backend services"
    echo "  ./artifactor backend restart    # Restart services"
    echo "  ./artifactor backend status     # Show health and metrics"
    echo "  ./artifactor backend logs       # View service logs"
    echo "  ./artifactor backend --help     # Show backend help"
    echo ""
    echo -e "${WHITE}Repository:${NC} https://github.com/SWORDIntel/ARTIFACTOR"
}

# Status check
check_status() {
    echo -e "${BLUE}🔍 Checking system status...${NC}"

    # Check Python
    if command -v python3 >/dev/null 2>&1; then
        PYTHON_VERSION=$(python3 --version 2>&1)
        echo -e "  ${GREEN}✓${NC} Python: $PYTHON_VERSION"
    else
        echo -e "  ${RED}✗${NC} Python 3 not found"
        return 1
    fi

    # Check virtual environment
    if [[ -f "$SCRIPT_DIR/claude-artifact-venv-manager.py" ]]; then
        VENV_STATUS=$(cd "$SCRIPT_DIR" && python3 claude-artifact-venv-manager.py --info 2>/dev/null | grep "Setup Complete" | cut -d: -f2 | xargs)
        if [[ "$VENV_STATUS" == "✅" ]]; then
            echo -e "  ${GREEN}✓${NC} Virtual environment ready"
        else
            echo -e "  ${YELLOW}⚠${NC} Virtual environment needs setup"
        fi
    else
        echo -e "  ${RED}✗${NC} Venv manager not found"
    fi

    # Check required files
    local required_files=(
        "claude-artifact-coordinator.py"
        "claude-artifact-downloader.py"
        "claude-artifact-launcher.py"
        "claude-artifact-venv-manager.py"
    )

    local missing_files=0
    for file in "${required_files[@]}"; do
        if [[ -f "$SCRIPT_DIR/$file" ]]; then
            echo -e "  ${GREEN}✓${NC} $file"
        else
            echo -e "  ${RED}✗${NC} $file missing"
            ((missing_files++))
        fi
    done

    if [[ $missing_files -gt 0 ]]; then
        echo -e "  ${RED}✗${NC} $missing_files required files missing"
        return 1
    fi

    echo -e "  ${GREEN}✓${NC} All components available"
    return 0
}

# Setup environment
setup_environment() {
    local force_flag=""
    local no_gui_flag=""
    local verbose_flag=""

    # Parse flags
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                force_flag="--force"
                shift
                ;;
            --no-gui)
                no_gui_flag="--no-gui"
                shift
                ;;
            --verbose)
                verbose_flag="--verbose"
                shift
                ;;
            *)
                shift
                ;;
        esac
    done

    echo -e "${BLUE}🚀 Setting up ARTIFACTOR environment...${NC}"

    cd "$SCRIPT_DIR"

    local setup_cmd="python3 claude-artifact-venv-manager.py --setup"
    [[ -n "$force_flag" ]] && setup_cmd="$setup_cmd $force_flag"
    [[ -n "$no_gui_flag" ]] && setup_cmd="$setup_cmd $no_gui_flag"
    [[ -n "$verbose_flag" ]] && setup_cmd="$setup_cmd $verbose_flag"

    if eval "$setup_cmd"; then
        echo -e "${GREEN}✅ Environment setup completed${NC}"
        return 0
    else
        echo -e "${RED}❌ Environment setup failed${NC}"
        return 1
    fi
}

# Launch application
launch_app() {
    local app_type="$1"
    shift

    cd "$SCRIPT_DIR"

    # Check if environment is ready
    if ! check_status >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠ Environment not ready, setting up...${NC}"
        if ! setup_environment; then
            echo -e "${RED}❌ Failed to setup environment${NC}"
            return 1
        fi
    fi

    echo -e "${BLUE}🚀 Launching ARTIFACTOR ($app_type)...${NC}"

    case "$app_type" in
        "gui"|"coordinator")
            python3 claude-artifact-launcher.py --coordinator "$@"
            ;;
        "cli"|"downloader")
            python3 claude-artifact-launcher.py --downloader "$@"
            ;;
        *)
            echo -e "${RED}❌ Unknown app type: $app_type${NC}"
            return 1
            ;;
    esac
}

# Run tests
run_tests() {
    local verbose=""
    [[ "$1" == "--verbose" ]] && verbose="--verbose"

    echo -e "${BLUE}🧪 Running ARTIFACTOR tests...${NC}"

    cd "$SCRIPT_DIR"

    if [[ -f "test-venv-system.py" ]]; then
        python3 test-venv-system.py $verbose
    else
        echo -e "${RED}❌ Test file not found${NC}"
        return 1
    fi
}

# Test agent coordination
test_agents() {
    echo -e "${BLUE}🤖 Testing agent coordination...${NC}"

    cd "$SCRIPT_DIR"

    if [[ -f "test-agent-coordination.py" ]]; then
        python3 test-agent-coordination.py
    else
        echo -e "${RED}❌ Agent test file not found${NC}"
        return 1
    fi
}

# Update dependencies
update_deps() {
    echo -e "${BLUE}📦 Updating dependencies...${NC}"

    cd "$SCRIPT_DIR"

    if python3 claude-artifact-venv-manager.py --setup --force; then
        echo -e "${GREEN}✅ Dependencies updated${NC}"
    else
        echo -e "${RED}❌ Update failed${NC}"
        return 1
    fi
}

# Clean environment
clean_env() {
    echo -e "${BLUE}🧹 Cleaning environment...${NC}"

    cd "$SCRIPT_DIR"

    if python3 claude-artifact-venv-manager.py --cleanup; then
        echo -e "${GREEN}✅ Environment cleaned${NC}"
    else
        echo -e "${RED}❌ Cleanup failed${NC}"
        return 1
    fi
}

# Backend management
manage_backend() {
    local backend_script="$SCRIPT_DIR/start-backend"

    # Check if start-backend script exists
    if [[ ! -f "$backend_script" ]]; then
        echo -e "${RED}❌ Backend management script not found: $backend_script${NC}"
        echo ""
        echo -e "${YELLOW}The backend management script should be located at:${NC}"
        echo "  $backend_script"
        echo ""
        echo -e "${YELLOW}Please ensure the ARTIFACTOR v3.0 backend is properly installed.${NC}"
        return 1
    fi

    # Make sure it's executable
    chmod +x "$backend_script" 2>/dev/null || true

    # Route all arguments to start-backend script
    "$backend_script" "$@"
}

# Main function
main() {
    # Parse global flags first
    local verbose=false
    local args=()

    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_help
                exit 0
                ;;
            --verbose)
                verbose=true
                args+=("$1")
                shift
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done

    # Restore args
    set -- "${args[@]}"

    # Parse command first to determine banner display
    local command="${1:-help}"

    # Show banner for interactive use (skip for status and backend commands)
    if [[ $# -eq 0 || ("$command" != "status" && "$command" != "backend") ]]; then
        show_banner
    fi

    # Now shift the command
    shift || true

    case "$command" in
        "gui"|"coordinator")
            launch_app "gui" "$@"
            ;;
        "cli"|"downloader")
            launch_app "cli" "$@"
            ;;
        "setup")
            setup_environment "$@"
            ;;
        "status")
            check_status
            ;;
        "test")
            run_tests "$@"
            ;;
        "agent"|"agents")
            test_agents "$@"
            ;;
        "update")
            update_deps "$@"
            ;;
        "clean")
            clean_env "$@"
            ;;
        "backend")
            manage_backend "$@"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo -e "${RED}❌ Unknown command: $command${NC}"
            echo "Use './artifactor --help' for usage information"
            exit 1
            ;;
    esac
}

# Handle script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi